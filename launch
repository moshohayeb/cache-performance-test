#!/bin/sh


perf_tmp=$(mktemp)
bench_tmp=$(mktemp)

gcc -Wall -g3 -o bench main.c utils.c

L1d=$(lscpu | grep 'L1d cache' | awk -F':' '{print $2}' | tr -d ' ') 
L1i=$(lscpu | grep 'L1i cache' | awk -F':' '{print $2}' | tr -d ' ') 
L2=$(lscpu | grep 'L2 cache' | awk -F':' '{print $2}' | tr -d ' ') 
L3=$(lscpu | grep 'L3 cache' | awk -F':' '{print $2}' | tr -d ' ') 
Freq=$(lscpu | grep 'CPU MH' | awk -F ':' '{print $2}' | tr -d ' ' | awk '{print $1 * 1000 * 1000}')
echo "L1 Data Cache: $L1d"
echo "L1 Instruction Cache: $L1i"
echo "L2 Cache: $L2"
echo "L3 Cache: $L3"
echo "Frequency: $Freq"
echo "------------------------------------"

function prepare() {
    > $perf_tmp 
    > $bench_tmp
}

function execute() {
    shuffle=$1
    n_elements=$2
    n_iter=$3
    perf stat --repeat=5 -e LLC-load-misses:u -e L1-dcache-load-misses:u -e cache-misses:u -e cycles:u ./bench $shuffle $n_elements $n_iter > $bench_tmp 2> $perf_tmp
}

function process() {
    shuf=$(cat $bench_tmp | grep 'Shuffle Enabled' | head -1 | awk -F'=' {'print $2'} | tr -d ' ')
    duration=$(cat $perf_tmp  | grep 'seconds time elapsed' | head -1 | awk '{printf("%0.5f\n", $1)}')
    cycles=$(cat $perf_tmp  | grep 'cycles:u' | awk '{print $1}' | tr -d ',')
    cache_misses=$(cat $perf_tmp  | grep 'cache-misses:u' | awk '{print $1}' | tr -d ',')
    l1d_cache_misses=$(cat $perf_tmp  | grep 'L1-dcache-load-misses' | awk '{print $1}' | tr -d ',')
    llc_cache_misses=$(cat $perf_tmp  | grep 'LLC-load-misses' | awk '{print $1}' | tr -d ',')

    iterations=$(cat $bench_tmp | grep 'Total Iteration' | head -1 |awk -F '=' '{print $2}' | tr -d ' ')
    struct_size=$(cat $bench_tmp | grep 'Structure Size' | head -1 | awk -F '=' '{print $2}' | tr -d ' ')
    working_set_size=$(cat $bench_tmp | grep 'Working Set' | head -1| awk -F '=' '{print $2}' | tr -d ' ')
    n_elements=$(cat $bench_tmp | grep 'Number of Elements' | head -1 |awk -F '=' '{print $2}' | tr -d ' ')

    cycle_per_iter=$((cycles / iterations))

    if [ "$shuf" == "Yes" ]; then
        sequential="No"
    else
        sequential="Yes"
    fi

    ns=$(echo "$cycle_per_iter $Freq" | awk '{printf("%d\n", ($1/$2) * 1000000000)}')
    printf "%20s = %10s\n" "Set Size"  $working_set_size
    printf "%20s = %10s\n" "Sequential"  $sequential
    printf "%20s = %10s\n" "Struct Size"  $struct_size
    printf "%20s = %10s\n" "# Of Elements"  $n_elements
    printf "%20s = %10s\n" "# Of Iteration"  $iterations
    printf "%20s = %10s\n" "Total Cycles"  $cycles
    printf "%20s = %10s\n" "Cycles Per Iter"  $cycle_per_iter
    printf "%20s = %10s\n" "Time Per Iter (ns)"  $ns
    printf "%20s = %10s\n" "Cache Misses"  $cache_misses
    printf "%20s = %10s\n" "L1 Data Cache Misses"  $l1d_cache_misses
    printf "%20s = %10s\n" "LLC Cache Misses"  $llc_cache_misses
    printf "%20s = %10s\n" "Duration (seconds)"  $duration


    echo "------------------------------------"

    # echo $1
    # cat $tmp
    # cat $perf_tmp
    # cat $bench_tmp
    # echo ""
}

N_ELEMENTS=(2 50 29000 1000000 9000000)
if [ "$1" == "" ]; then
    N_ITER=1000000000
else 
    N_ITER=$1
fi


for n in "${N_ELEMENTS[@]}"; do
    prepare
    execute "sequential" $n $N_ITER
    process
done

for n in "${N_ELEMENTS[@]}"; do
    prepare
    execute "shuffle" $n $N_ITER
    process
done



# rm -f $perf_tmp $bench_tmp